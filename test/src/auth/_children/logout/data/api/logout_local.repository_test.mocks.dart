// Mocks generated by Mockito 5.4.6 from annotations
// in mobile/test/src/auth/_children/logout/data/api/logout_local.repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mobile/core/storage/user_session.storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i2.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get accessToken =>
      (super.noSuchMethod(
            Invocation.getter(#accessToken),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#accessToken),
            ),
          )
          as String);

  @override
  String get refreshToken =>
      (super.noSuchMethod(
            Invocation.getter(#refreshToken),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#refreshToken),
            ),
          )
          as String);

  @override
  String get userId =>
      (super.noSuchMethod(
            Invocation.getter(#userId),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#userId),
            ),
          )
          as String);

  @override
  String get username =>
      (super.noSuchMethod(
            Invocation.getter(#username),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#username),
            ),
          )
          as String);

  @override
  String get userEmail =>
      (super.noSuchMethod(
            Invocation.getter(#userEmail),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#userEmail),
            ),
          )
          as String);

  @override
  String get userProfilePicture =>
      (super.noSuchMethod(
            Invocation.getter(#userProfilePicture),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#userProfilePicture),
            ),
          )
          as String);

  @override
  bool get isLoggedIn =>
      (super.noSuchMethod(Invocation.getter(#isLoggedIn), returnValue: false)
          as bool);

  @override
  set accessToken(String? token) => super.noSuchMethod(
    Invocation.setter(#accessToken, token),
    returnValueForMissingStub: null,
  );

  @override
  set refreshToken(String? token) => super.noSuchMethod(
    Invocation.setter(#refreshToken, token),
    returnValueForMissingStub: null,
  );

  @override
  set userId(String? id) => super.noSuchMethod(
    Invocation.setter(#userId, id),
    returnValueForMissingStub: null,
  );

  @override
  set username(String? username) => super.noSuchMethod(
    Invocation.setter(#username, username),
    returnValueForMissingStub: null,
  );

  @override
  set userEmail(String? email) => super.noSuchMethod(
    Invocation.setter(#userEmail, email),
    returnValueForMissingStub: null,
  );

  @override
  set userProfilePicture(String? picture) => super.noSuchMethod(
    Invocation.setter(#userProfilePicture, picture),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

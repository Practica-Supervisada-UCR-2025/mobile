// Mocks generated by Mockito 5.4.6 from annotations
// in mobile/test/core/services/api_service/data/api/api_service_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i10;
import 'dart:ui' as _i13;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/material.dart' as _i3;
import 'package:flutter/scheduler.dart' as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i14;
import 'package:http/http.dart' as _i2;
import 'package:mobile/core/services/service_locator.dart' as _i12;
import 'package:mobile/core/storage/user_session.storage.dart' as _i11;
import 'package:mobile/src/auth/_children/_children.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScaffoldMessenger_2 extends _i1.SmartFake
    implements _i3.ScaffoldMessenger {
  _FakeScaffoldMessenger_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_3 extends _i1.SmartFake implements _i3.BuildContext {
  _FakeBuildContext_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScaffoldFeatureController_4<T extends _i3.Widget, U>
    extends _i1.SmartFake
    implements _i3.ScaffoldFeatureController<T, U> {
  _FakeScaffoldFeatureController_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_5 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_6 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeTicker_7 extends _i1.SmartFake implements _i5.Ticker {
  _FakeTicker_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

class _FakeLogoutRepository_8 extends _i1.SmartFake
    implements _i6.LogoutRepository {
  _FakeLogoutRepository_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<_i10.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i7.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
          )
          as _i7.Future<_i10.Uint8List>);

  @override
  _i7.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i7.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i7.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i11.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get accessToken =>
      (super.noSuchMethod(
            Invocation.getter(#accessToken),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#accessToken),
            ),
          )
          as String);

  @override
  String get refreshToken =>
      (super.noSuchMethod(
            Invocation.getter(#refreshToken),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#refreshToken),
            ),
          )
          as String);

  @override
  String get userId =>
      (super.noSuchMethod(
            Invocation.getter(#userId),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#userId),
            ),
          )
          as String);

  @override
  String get username =>
      (super.noSuchMethod(
            Invocation.getter(#username),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#username),
            ),
          )
          as String);

  @override
  String get userEmail =>
      (super.noSuchMethod(
            Invocation.getter(#userEmail),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#userEmail),
            ),
          )
          as String);

  @override
  String get userProfilePicture =>
      (super.noSuchMethod(
            Invocation.getter(#userProfilePicture),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#userProfilePicture),
            ),
          )
          as String);

  @override
  bool get isLoggedIn =>
      (super.noSuchMethod(Invocation.getter(#isLoggedIn), returnValue: false)
          as bool);

  @override
  String get fcmToken =>
      (super.noSuchMethod(
            Invocation.getter(#fcmToken),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#fcmToken),
            ),
          )
          as String);

  @override
  set accessToken(String? token) => super.noSuchMethod(
    Invocation.setter(#accessToken, token),
    returnValueForMissingStub: null,
  );

  @override
  set refreshToken(String? token) => super.noSuchMethod(
    Invocation.setter(#refreshToken, token),
    returnValueForMissingStub: null,
  );

  @override
  set userId(String? id) => super.noSuchMethod(
    Invocation.setter(#userId, id),
    returnValueForMissingStub: null,
  );

  @override
  set username(String? username) => super.noSuchMethod(
    Invocation.setter(#username, username),
    returnValueForMissingStub: null,
  );

  @override
  set userEmail(String? email) => super.noSuchMethod(
    Invocation.setter(#userEmail, email),
    returnValueForMissingStub: null,
  );

  @override
  set userProfilePicture(String? picture) => super.noSuchMethod(
    Invocation.setter(#userProfilePicture, picture),
    returnValueForMissingStub: null,
  );

  @override
  set fcmToken(String? token) => super.noSuchMethod(
    Invocation.setter(#fcmToken, token),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [ServiceLocator].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceLocator extends _i1.Mock implements _i12.ServiceLocator {
  MockServiceLocator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set logoutBloc(_i6.LogoutBloc? _logoutBloc) => super.noSuchMethod(
    Invocation.setter(#logoutBloc, _logoutBloc),
    returnValueForMissingStub: null,
  );

  @override
  set scaffoldMessengerKey(
    _i3.GlobalKey<_i3.ScaffoldMessengerState>? _scaffoldMessengerKey,
  ) => super.noSuchMethod(
    Invocation.setter(#scaffoldMessengerKey, _scaffoldMessengerKey),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ScaffoldMessengerState].
///
/// See the documentation for Mockito's code generation for more information.
class MockScaffoldMessengerState extends _i1.Mock
    implements _i3.ScaffoldMessengerState {
  MockScaffoldMessengerState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ScaffoldMessenger get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeScaffoldMessenger_2(
              this,
              Invocation.getter(#widget),
            ),
          )
          as _i3.ScaffoldMessenger);

  @override
  _i3.BuildContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeBuildContext_3(this, Invocation.getter(#context)),
          )
          as _i3.BuildContext);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  void didChangeDependencies() => super.noSuchMethod(
    Invocation.method(#didChangeDependencies, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason>
  showSnackBar(
    _i3.SnackBar? snackBar, {
    _i3.AnimationStyle? snackBarAnimationStyle,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #showSnackBar,
              [snackBar],
              {#snackBarAnimationStyle: snackBarAnimationStyle},
            ),
            returnValue: _FakeScaffoldFeatureController_4<
              _i3.SnackBar,
              _i3.SnackBarClosedReason
            >(
              this,
              Invocation.method(
                #showSnackBar,
                [snackBar],
                {#snackBarAnimationStyle: snackBarAnimationStyle},
              ),
            ),
          )
          as _i3.ScaffoldFeatureController<
            _i3.SnackBar,
            _i3.SnackBarClosedReason
          >);

  @override
  void removeCurrentSnackBar({
    _i3.SnackBarClosedReason? reason = _i3.SnackBarClosedReason.remove,
  }) => super.noSuchMethod(
    Invocation.method(#removeCurrentSnackBar, [], {#reason: reason}),
    returnValueForMissingStub: null,
  );

  @override
  void hideCurrentSnackBar({
    _i3.SnackBarClosedReason? reason = _i3.SnackBarClosedReason.hide,
  }) => super.noSuchMethod(
    Invocation.method(#hideCurrentSnackBar, [], {#reason: reason}),
    returnValueForMissingStub: null,
  );

  @override
  void clearSnackBars() => super.noSuchMethod(
    Invocation.method(#clearSnackBars, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.ScaffoldFeatureController<
    _i3.MaterialBanner,
    _i3.MaterialBannerClosedReason
  >
  showMaterialBanner(_i3.MaterialBanner? materialBanner) =>
      (super.noSuchMethod(
            Invocation.method(#showMaterialBanner, [materialBanner]),
            returnValue: _FakeScaffoldFeatureController_4<
              _i3.MaterialBanner,
              _i3.MaterialBannerClosedReason
            >(this, Invocation.method(#showMaterialBanner, [materialBanner])),
          )
          as _i3.ScaffoldFeatureController<
            _i3.MaterialBanner,
            _i3.MaterialBannerClosedReason
          >);

  @override
  void removeCurrentMaterialBanner({
    _i3.MaterialBannerClosedReason? reason =
        _i3.MaterialBannerClosedReason.remove,
  }) => super.noSuchMethod(
    Invocation.method(#removeCurrentMaterialBanner, [], {#reason: reason}),
    returnValueForMissingStub: null,
  );

  @override
  void hideCurrentMaterialBanner({
    _i3.MaterialBannerClosedReason? reason =
        _i3.MaterialBannerClosedReason.hide,
  }) => super.noSuchMethod(
    Invocation.method(#hideCurrentMaterialBanner, [], {#reason: reason}),
    returnValueForMissingStub: null,
  );

  @override
  void clearMaterialBanners() => super.noSuchMethod(
    Invocation.method(#clearMaterialBanners, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Widget build(_i3.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#build, [context]),
            returnValue: _FakeWidget_5(
              this,
              Invocation.method(#build, [context]),
            ),
          )
          as _i3.Widget);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void initState() => super.noSuchMethod(
    Invocation.method(#initState, []),
    returnValueForMissingStub: null,
  );

  @override
  void didUpdateWidget(_i3.ScaffoldMessenger? oldWidget) => super.noSuchMethod(
    Invocation.method(#didUpdateWidget, [oldWidget]),
    returnValueForMissingStub: null,
  );

  @override
  void reassemble() => super.noSuchMethod(
    Invocation.method(#reassemble, []),
    returnValueForMissingStub: null,
  );

  @override
  void setState(_i13.VoidCallback? fn) => super.noSuchMethod(
    Invocation.method(#setState, [fn]),
    returnValueForMissingStub: null,
  );

  @override
  void deactivate() => super.noSuchMethod(
    Invocation.method(#deactivate, []),
    returnValueForMissingStub: null,
  );

  @override
  void activate() => super.noSuchMethod(
    Invocation.method(#activate, []),
    returnValueForMissingStub: null,
  );

  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  _i4.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i4.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_6(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i4.DiagnosticsNode);

  @override
  _i5.Ticker createTicker(_i5.TickerCallback? onTick) =>
      (super.noSuchMethod(
            Invocation.method(#createTicker, [onTick]),
            returnValue: _FakeTicker_7(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
          )
          as _i5.Ticker);
}

/// A class which mocks [LogoutBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutBloc extends _i1.Mock implements _i6.LogoutBloc {
  MockLogoutBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.LogoutRepository get logoutRepository =>
      (super.noSuchMethod(
            Invocation.getter(#logoutRepository),
            returnValue: _FakeLogoutRepository_8(
              this,
              Invocation.getter(#logoutRepository),
            ),
          )
          as _i6.LogoutRepository);

  @override
  _i6.LogoutState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i9.dummyValue<_i6.LogoutState>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.LogoutState);

  @override
  _i7.Stream<_i6.LogoutState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i7.Stream<_i6.LogoutState>.empty(),
          )
          as _i7.Stream<_i6.LogoutState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i6.LogoutEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.LogoutEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.LogoutState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.LogoutEvent>(
    _i14.EventHandler<E, _i6.LogoutState>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i14.Transition<_i6.LogoutEvent, _i6.LogoutState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void onChange(_i14.Change<_i6.LogoutState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GlobalKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalKey<T extends _i3.State<_i3.StatefulWidget>> extends _i1.Mock
    implements _i3.GlobalKey<T> {
  MockGlobalKey() {
    _i1.throwOnMissingStub(this);
  }
}

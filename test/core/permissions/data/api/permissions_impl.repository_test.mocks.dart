// Mocks generated by Mockito 5.4.6 from annotations
// in mobile/test/core/permissions/data/api/permissions_impl.repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:device_info_plus/device_info_plus.dart' as _i14;
import 'package:device_info_plus/src/model/android_device_info.dart' as _i2;
import 'package:device_info_plus/src/model/ios_device_info.dart' as _i3;
import 'package:device_info_plus/src/model/linux_device_info.dart' as _i4;
import 'package:device_info_plus/src/model/macos_device_info.dart' as _i6;
import 'package:device_info_plus/src/model/web_browser_info.dart' as _i5;
import 'package:device_info_plus/src/model/windows_device_info.dart' as _i7;
import 'package:device_info_plus_platform_interface/device_info_plus_platform_interface.dart'
    as _i8;
import 'package:flutter/foundation.dart' as _i10;
import 'package:flutter/src/widgets/framework.dart' as _i9;
import 'package:flutter/src/widgets/notification_listener.dart' as _i16;
import 'package:mobile/core/permissions/domain/repository/permissions_service.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i15;
import 'package:permission_handler/permission_handler.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAndroidDeviceInfo_0 extends _i1.SmartFake
    implements _i2.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIosDeviceInfo_1 extends _i1.SmartFake implements _i3.IosDeviceInfo {
  _FakeIosDeviceInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxDeviceInfo_2 extends _i1.SmartFake
    implements _i4.LinuxDeviceInfo {
  _FakeLinuxDeviceInfo_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebBrowserInfo_3 extends _i1.SmartFake
    implements _i5.WebBrowserInfo {
  _FakeWebBrowserInfo_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsDeviceInfo_4 extends _i1.SmartFake
    implements _i6.MacOsDeviceInfo {
  _FakeMacOsDeviceInfo_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsDeviceInfo_5 extends _i1.SmartFake
    implements _i7.WindowsDeviceInfo {
  _FakeWindowsDeviceInfo_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseDeviceInfo_6 extends _i1.SmartFake
    implements _i8.BaseDeviceInfo {
  _FakeBaseDeviceInfo_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAndroidBuildVersion_7 extends _i1.SmartFake
    implements _i2.AndroidBuildVersion {
  _FakeAndroidBuildVersion_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_8 extends _i1.SmartFake implements _i9.Widget {
  _FakeWidget_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeInheritedWidget_9 extends _i1.SmartFake
    implements _i9.InheritedWidget {
  _FakeInheritedWidget_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeDiagnosticsNode_10 extends _i1.SmartFake
    implements _i10.DiagnosticsNode {
  _FakeDiagnosticsNode_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i10.TextTreeConfiguration? parentConfiguration,
    _i10.DiagnosticLevel? minLevel = _i10.DiagnosticLevel.info,
  }) => super.toString();
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i11.PermissionService {
  MockPermissionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i13.PermissionStatus> getCameraStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getCameraStatus, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> requestCamera() =>
      (super.noSuchMethod(
            Invocation.method(#requestCamera, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> getGalleryStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getGalleryStatus, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> requestGallery() =>
      (super.noSuchMethod(
            Invocation.method(#requestGallery, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> getStorageStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageStatus, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> requestStorage() =>
      (super.noSuchMethod(
            Invocation.method(#requestStorage, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> getPhotosStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getPhotosStatus, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> requestPhotos() =>
      (super.noSuchMethod(
            Invocation.method(#requestPhotos, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> getNotificationsStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationsStatus, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<_i13.PermissionStatus> requestNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#requestNotifications, []),
            returnValue: _i12.Future<_i13.PermissionStatus>.value(
              _i13.PermissionStatus.denied,
            ),
          )
          as _i12.Future<_i13.PermissionStatus>);

  @override
  _i12.Future<bool> openSettings() =>
      (super.noSuchMethod(
            Invocation.method(#openSettings, []),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i14.DeviceInfoPlugin {
  MockDeviceInfoPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.AndroidDeviceInfo> get androidInfo =>
      (super.noSuchMethod(
            Invocation.getter(#androidInfo),
            returnValue: _i12.Future<_i2.AndroidDeviceInfo>.value(
              _FakeAndroidDeviceInfo_0(this, Invocation.getter(#androidInfo)),
            ),
          )
          as _i12.Future<_i2.AndroidDeviceInfo>);

  @override
  _i12.Future<_i3.IosDeviceInfo> get iosInfo =>
      (super.noSuchMethod(
            Invocation.getter(#iosInfo),
            returnValue: _i12.Future<_i3.IosDeviceInfo>.value(
              _FakeIosDeviceInfo_1(this, Invocation.getter(#iosInfo)),
            ),
          )
          as _i12.Future<_i3.IosDeviceInfo>);

  @override
  _i12.Future<_i4.LinuxDeviceInfo> get linuxInfo =>
      (super.noSuchMethod(
            Invocation.getter(#linuxInfo),
            returnValue: _i12.Future<_i4.LinuxDeviceInfo>.value(
              _FakeLinuxDeviceInfo_2(this, Invocation.getter(#linuxInfo)),
            ),
          )
          as _i12.Future<_i4.LinuxDeviceInfo>);

  @override
  _i12.Future<_i5.WebBrowserInfo> get webBrowserInfo =>
      (super.noSuchMethod(
            Invocation.getter(#webBrowserInfo),
            returnValue: _i12.Future<_i5.WebBrowserInfo>.value(
              _FakeWebBrowserInfo_3(this, Invocation.getter(#webBrowserInfo)),
            ),
          )
          as _i12.Future<_i5.WebBrowserInfo>);

  @override
  _i12.Future<_i6.MacOsDeviceInfo> get macOsInfo =>
      (super.noSuchMethod(
            Invocation.getter(#macOsInfo),
            returnValue: _i12.Future<_i6.MacOsDeviceInfo>.value(
              _FakeMacOsDeviceInfo_4(this, Invocation.getter(#macOsInfo)),
            ),
          )
          as _i12.Future<_i6.MacOsDeviceInfo>);

  @override
  _i12.Future<_i7.WindowsDeviceInfo> get windowsInfo =>
      (super.noSuchMethod(
            Invocation.getter(#windowsInfo),
            returnValue: _i12.Future<_i7.WindowsDeviceInfo>.value(
              _FakeWindowsDeviceInfo_5(this, Invocation.getter(#windowsInfo)),
            ),
          )
          as _i12.Future<_i7.WindowsDeviceInfo>);

  @override
  _i12.Future<_i8.BaseDeviceInfo> get deviceInfo =>
      (super.noSuchMethod(
            Invocation.getter(#deviceInfo),
            returnValue: _i12.Future<_i8.BaseDeviceInfo>.value(
              _FakeBaseDeviceInfo_6(this, Invocation.getter(#deviceInfo)),
            ),
          )
          as _i12.Future<_i8.BaseDeviceInfo>);
}

/// A class which mocks [AndroidDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidDeviceInfo extends _i1.Mock implements _i2.AndroidDeviceInfo {
  MockAndroidDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AndroidBuildVersion get version =>
      (super.noSuchMethod(
            Invocation.getter(#version),
            returnValue: _FakeAndroidBuildVersion_7(
              this,
              Invocation.getter(#version),
            ),
          )
          as _i2.AndroidBuildVersion);

  @override
  String get board =>
      (super.noSuchMethod(
            Invocation.getter(#board),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#board),
            ),
          )
          as String);

  @override
  String get bootloader =>
      (super.noSuchMethod(
            Invocation.getter(#bootloader),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#bootloader),
            ),
          )
          as String);

  @override
  String get brand =>
      (super.noSuchMethod(
            Invocation.getter(#brand),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#brand),
            ),
          )
          as String);

  @override
  String get device =>
      (super.noSuchMethod(
            Invocation.getter(#device),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#device),
            ),
          )
          as String);

  @override
  String get display =>
      (super.noSuchMethod(
            Invocation.getter(#display),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#display),
            ),
          )
          as String);

  @override
  String get fingerprint =>
      (super.noSuchMethod(
            Invocation.getter(#fingerprint),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#fingerprint),
            ),
          )
          as String);

  @override
  String get hardware =>
      (super.noSuchMethod(
            Invocation.getter(#hardware),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#hardware),
            ),
          )
          as String);

  @override
  String get host =>
      (super.noSuchMethod(
            Invocation.getter(#host),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#host),
            ),
          )
          as String);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i15.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  String get manufacturer =>
      (super.noSuchMethod(
            Invocation.getter(#manufacturer),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#manufacturer),
            ),
          )
          as String);

  @override
  String get model =>
      (super.noSuchMethod(
            Invocation.getter(#model),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#model),
            ),
          )
          as String);

  @override
  String get product =>
      (super.noSuchMethod(
            Invocation.getter(#product),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#product),
            ),
          )
          as String);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  List<String> get supported32BitAbis =>
      (super.noSuchMethod(
            Invocation.getter(#supported32BitAbis),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> get supported64BitAbis =>
      (super.noSuchMethod(
            Invocation.getter(#supported64BitAbis),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  List<String> get supportedAbis =>
      (super.noSuchMethod(
            Invocation.getter(#supportedAbis),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  String get tags =>
      (super.noSuchMethod(
            Invocation.getter(#tags),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#tags),
            ),
          )
          as String);

  @override
  String get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#type),
            ),
          )
          as String);

  @override
  bool get isPhysicalDevice =>
      (super.noSuchMethod(
            Invocation.getter(#isPhysicalDevice),
            returnValue: false,
          )
          as bool);

  @override
  List<String> get systemFeatures =>
      (super.noSuchMethod(
            Invocation.getter(#systemFeatures),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  String get serialNumber =>
      (super.noSuchMethod(
            Invocation.getter(#serialNumber),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#serialNumber),
            ),
          )
          as String);

  @override
  bool get isLowRamDevice =>
      (super.noSuchMethod(
            Invocation.getter(#isLowRamDevice),
            returnValue: false,
          )
          as bool);

  @override
  int get physicalRamSize =>
      (super.noSuchMethod(Invocation.getter(#physicalRamSize), returnValue: 0)
          as int);

  @override
  int get availableRamSize =>
      (super.noSuchMethod(Invocation.getter(#availableRamSize), returnValue: 0)
          as int);

  @override
  Map<String, dynamic> get data =>
      (super.noSuchMethod(
            Invocation.getter(#data),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(
            Invocation.method(#toMap, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [AndroidBuildVersion].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidBuildVersion extends _i1.Mock
    implements _i2.AndroidBuildVersion {
  MockAndroidBuildVersion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get codename =>
      (super.noSuchMethod(
            Invocation.getter(#codename),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#codename),
            ),
          )
          as String);

  @override
  String get incremental =>
      (super.noSuchMethod(
            Invocation.getter(#incremental),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#incremental),
            ),
          )
          as String);

  @override
  String get release =>
      (super.noSuchMethod(
            Invocation.getter(#release),
            returnValue: _i15.dummyValue<String>(
              this,
              Invocation.getter(#release),
            ),
          )
          as String);

  @override
  int get sdkInt =>
      (super.noSuchMethod(Invocation.getter(#sdkInt), returnValue: 0) as int);

  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(
            Invocation.method(#toMap, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i9.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_8(this, Invocation.getter(#widget)),
          )
          as _i9.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
          )
          as bool);

  @override
  _i9.InheritedWidget dependOnInheritedElement(
    _i9.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_9(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i9.InheritedWidget);

  @override
  void visitAncestorElements(_i9.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitAncestorElements, [visitor]),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i9.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i16.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(#dispatchNotification, [notification]),
        returnValueForMissingStub: null,
      );

  @override
  _i10.DiagnosticsNode describeElement(
    String? name, {
    _i10.DiagnosticsTreeStyle? style = _i10.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_10(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i10.DiagnosticsNode);

  @override
  _i10.DiagnosticsNode describeWidget(
    String? name, {
    _i10.DiagnosticsTreeStyle? style = _i10.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_10(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i10.DiagnosticsNode);

  @override
  List<_i10.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i10.DiagnosticsNode>[],
          )
          as List<_i10.DiagnosticsNode>);

  @override
  _i10.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_10(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i10.DiagnosticsNode);
}
